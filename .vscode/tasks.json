{
  "version": "2.0.0",
  "tasks": [
    //
    //IF YOU HAVE JUST ONE dotnet test PROJECT TO WATCH,
    //THEN the following would be enough. If not, use the
    //task currently in operation whic huses npm script
    //to watch for changes, then rebuild in succession
    //so as to avoid to parallel builds involving the
    //same package references from stepping on each other's
    //toes (one build locking files out that need to be
    // written by the other parallel build is essentially
    // what goes wrong).
    //
    //If watching integration tests that do not reference
    //the proejct under test directly (e.g. API tests
    // or selenium webdriver tests of an ASP.NET Core MVC
    // app), then you would still like tests to be retriggered
    // when the project under test changes. While dotnet watch
    //automatically watches any referenced projects for changes,
    //here you are not referenceing the project under test.
    //In order to watch this project, add a `<Watch>` element
    //in test project's csproj. dotnet watch would additionally
    //watch the specified files also.
    //
    //For example, for the Integration Tests task shown below,
    //I would add the following to `IntegrationTests.csproj`
    // (you can add it at the end, just before the closing
    // </Project> tag):
    //
    // <ItemGroup>
    //   <Watch Include="..\flowmazonapi\**\*.cs"
    // Exclude="..\flowmazonapi\bin\**\*;..flowmazonapi\obj\**\*" />
    // </ItemGroup>
    //
    //
    // {
    //   "label": "API Integration Tests",
    //   "type": "shell",
    //   "command": "dotnet watch test",
    //   "options": {
    //     "cwd": "${workspaceFolder}/flowmazonbackend/flowmazonapi.IntegrationTests"
    //   },
    //   "isBackground": true,
    //   "runOptions": {
    //     "runOn": "folderOpen"
    //   },
    //   "presentation": {
    //     "panel": "dedicated"
    //   },
    //   "problemMatcher": {
    //     "fileLocation": ["relative", "${workspaceFolder}"],
    //     "severity": "error",
    //     "pattern": {
    //       // Catches an assertion failure in a test or an exception
    //       //throw from code-under-test, in both of which cases a like
    //       //like the following is printed:
    //       //
    //       //flowmazonapi.UnitTests failed with 1 error(s) and 1 warning(s) (0.6s)
    //       //
    //       //or the following that is printed if a project failed to build:
    //       //
    //       //Build failed with 3 error(s) in 6.8s
    //       "regexp": "^(.*)(failed) (with \\d* error\\(s\\).*)$",
    //       "file": 1,
    //       "message": 2
    //     },
    //     "background": {
    //       "activeOnStart": true,
    //       "beginsPattern": "^Restore complete \\(.*\\).*$",
    //       //If build failed (i.e. tests didn't run) then this pattern
    //       //matches the end of output which looks like this:
    //       //
    //       //Build failed with 1 error(s) and 1 warning(s) in 2.6s
    //       "endsPattern": "^.*Waiting for a file to change before restarting dotnet.*$"
    //     }
    //   }
    // },
    {
      "label": ".NET tests watch",
      "type": "shell",
      "command": "npm run test-dotnet:watch",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "isBackground": true,
      "runOptions": {
        "runOn": "folderOpen"
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error",
        "pattern": {
          // Catches an assertion failure in a test or an exception
          //throw from code-under-test, in both of which cases,
          //something like the following is printed:
          //
          //Failed!  - Failed:     3, Passed:     0, Skipped:     0, Total:     3, Duration: 396 ms - flowmazonapi.IntegrationTests.dll (net8.0)
          //
          //or the following that is printed if a project failed to build:
          //
          //failed with 3 error(s)
          "regexp": "^.*([F|f]ail)(ed)((!  - (Failed):)|( with \\d* error\\(s\\))).*$",
          "file": 1,
          "message": 2
        },
        "background": {
          "activeOnStart": true,
          // I print this with an echo when a test run starts
          // after a change has been detected in the
          // watched files
          "beginsPattern": "^DOTNET tests watch - starting test run\\s*$",
          // I print this with echo once test run has finished
          "endsPattern": "^DOTNET tests watch - test run finished\\s*$"
        }
      }
    },
    {
      "label": "Storybook watch",
      "type": "shell", //"process" does not work as value
      "command": "npm run test-storybook:watch",
      "options": {
        "cwd": "${workspaceFolder}/flowmazonfrontend"
      },
      "args": [],
      "isBackground": true, //this makes it keep running in the background without interrupting what you're doing
      "runOptions": {
        "runOn": "folderOpen" //start this task when folder is opened in VS Code
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error", //probabaly redundant as it is the default
        "pattern": {
          "kind": "file",
          "regexp": "(^\\[TEST\\]\\s*FAIL\\s*(browser:\\s*\\S*)\\s*(.*)\\s\\(.*\\)\\s*$)|(If you are in development, this likely indicates a problem with your Storybook process,)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)",
          "message": 1,
          "file": 2
        },
        "background": {
          "activeOnStart": true,
          //I have verified that if either of the following regexes is wrong,
          //you don't get the tick on the terminal to indicate once
          //a test run has completed (even though our watch task carries on running)
          "beginsPattern": "(^\\[TEST\\]\\s*Starting Storybook tests\\.\\.\\.\\s*$)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)",
          //"beginsPattern": "^\\s*Running \\d* tests using \\d* workers\\s*$",
          //USE THE FOLLOWING endsPattern IF REVERTING TO CHOKIDAR TO WATCH
          "endsPattern": "(^\\[TEST\\]\\s*Completed Storybook tests\\.\\.\\.\\s*$)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)"
          //"endsPattern": "^Waiting for file changes\\. Press enter to run tests, q to quit or h for more options\\.\\s*"
        }
      }
    },
    {
      "label": "Playwright watch",
      "type": "shell", //"process" does not work as value
      "command": "npm run test-playwright:watch",
      "options": {
        "cwd": "${workspaceFolder}/flowmazonfrontend"
      },
      "args": [],
      "isBackground": true, //this makes it keep running in the background without interrupting what you're doing
      "runOptions": {
        "runOn": "folderOpen" //start this task when folder is opened in VS Code
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error", //probabaly redundant as it is the default
        "pattern": {
          "regexp": "^\\[TEST\\]\\s*\\[(.*)\\]\\s\\S\\s(.*):(\\d+):(\\d+).*$",
          "file": 2,
          "line": 3,
          "column": 4,
          "message": 1
          //"regexp": "^\\s*\\d*\\sfailed\\s*$"
        },
        "background": {
          "activeOnStart": true,
          //I have verified that if either of the following regexes is wrong,
          //you don't get the tick on the terminal to indicate once
          //a test run has completed (even though our watch task carries on running)
          "beginsPattern": "^\\[TEST\\]\\s*Running \\d* tests using \\d* workers\\s*$",
          //"beginsPattern": "^\\s*Running \\d* tests using \\d* workers\\s*$",
          //USE THE FOLLOWING endsPattern IF REVERTING TO CHOKIDAR TO WATCH
          "endsPattern": "^\\[TEST\\]\\s*To open last HTML report run:\\s*$"
          //"endsPattern": "^Waiting for file changes\\. Press enter to run tests, q to quit or h for more options\\.\\s*"
        }
      }
    }
  ]
}
