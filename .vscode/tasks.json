{
  "version": "2.0.0",
  "tasks": [
    {
      "label": ".NET tests watch",
      "type": "shell",

      //The great thing is that dotnet test watches automatically
      //watches not just the project passed to it byt also any
      //<ProjectRefernce> (i.e refernced project) in taht project.
      //NOTE THOUGH that integration test project does not reference
      //the API project as it launches it as a Docker container and
      //does not - in fact SHOULD NOT - reference it directly.
      //To get around that I hacve <Watch> item in the test project's
      //csproj. This is a glob of files in API project.
      //These will be watched by dotnet watch test on top of the project
      //it watches by default.
      "command": "npm run test-dotnet:watch",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "isBackground": true,
      "runOptions": {
        "runOn": "folderOpen"
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error",
        "pattern": {
          // Catches an assertion failure in a test or an exception
          //throw from code-under-test, in both of which cases a like
          //like the following is printed:
          //
          //Failed!  - Failed:     3, Passed:     0, Skipped:     0, Total:     3, Duration: 396 ms - flowmazonapi.IntegrationTests.dll (net8.0)
          //
          //or the following that is printed if a project failed to build:
          //
          //failed with 3 error(s)
          "regexp": "^.*([F|f]ail)(ed)((!  - (Failed):)|( with \\d* error\\(s\\))).*$",
          "file": 1,
          "message": 2
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": "^DOTNET tests watch - starting test run\\s*$",
          //If build failed (i.e. tests didn't run) then this pattern
          //matches the end of output which looks like this:
          //
          //Build failed with 1 error(s) and 1 warning(s) in 2.6s
          "endsPattern": "^DOTNET tests watch - test run finished\\s*$"
        }
      }
    },
    {
      "label": "Storybook watch",
      "type": "shell", //"process" does not work as value
      "command": "npm run test-storybook:watch",
      "options": {
        "cwd": "${workspaceFolder}/flowmazonfrontend"
      },
      "args": [],
      "isBackground": true, //this makes it keep running in the background without interrupting what you're doing
      "runOptions": {
        "runOn": "folderOpen" //start this task when folder is opened in VS Code
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error", //probabaly redundant as it is the default
        "pattern": {
          "kind": "file",
          "regexp": "(^\\[TEST\\]\\s*FAIL\\s*(browser:\\s*\\S*)\\s*(.*)\\s\\(.*\\)\\s*$)|(If you are in development, this likely indicates a problem with your Storybook process,)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)",
          "message": 1,
          "file": 2
        },
        "background": {
          "activeOnStart": true,
          //I have verified that if either of the following regexes is wrong,
          //you don't get the tick on the terminal to indicate once
          //a test run has completed (even though our watch task carries on running)
          "beginsPattern": "(^\\[TEST\\]\\s*Starting Storybook tests\\.\\.\\.\\s*$)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)",
          //"beginsPattern": "^\\s*Running \\d* tests using \\d* workers\\s*$",
          //USE THE FOLLOWING endsPattern IF REVERTING TO CHOKIDAR TO WATCH
          "endsPattern": "(^\\[TEST\\]\\s*Completed Storybook tests\\.\\.\\.\\s*$)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)"
          //"endsPattern": "^Waiting for file changes\\. Press enter to run tests, q to quit or h for more options\\.\\s*"
        }
      }
    },
    {
      "label": "Playwright watch",
      "type": "shell", //"process" does not work as value
      "command": "npm run test-playwright:watch",
      "options": {
        "cwd": "${workspaceFolder}/flowmazonfrontend"
      },
      "args": [],
      "isBackground": true, //this makes it keep running in the background without interrupting what you're doing
      "runOptions": {
        "runOn": "folderOpen" //start this task when folder is opened in VS Code
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error", //probabaly redundant as it is the default
        "pattern": {
          "regexp": "^\\[TEST\\]\\s*\\[(.*)\\]\\s\\S\\s(.*):(\\d+):(\\d+).*$",
          "file": 2,
          "line": 3,
          "column": 4,
          "message": 1
          //"regexp": "^\\s*\\d*\\sfailed\\s*$"
        },
        "background": {
          "activeOnStart": true,
          //I have verified that if either of the following regexes is wrong,
          //you don't get the tick on the terminal to indicate once
          //a test run has completed (even though our watch task carries on running)
          "beginsPattern": "^\\[TEST\\]\\s*Running \\d* tests using \\d* workers\\s*$",
          //"beginsPattern": "^\\s*Running \\d* tests using \\d* workers\\s*$",
          //USE THE FOLLOWING endsPattern IF REVERTING TO CHOKIDAR TO WATCH
          "endsPattern": "^\\[TEST\\]\\s*To open last HTML report run:\\s*$"
          //"endsPattern": "^Waiting for file changes\\. Press enter to run tests, q to quit or h for more options\\.\\s*"
        }
      }
    }
  ]
}
