{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "API Unit Tests",
      "type": "shell",
      "command": "dotnet watch test",
      "options": {
        "cwd": "${workspaceFolder}/flowmazonbackend/flowmazonapi.UnitTests"
      },
      "isBackground": true,
      "runOptions": {
        "runOn": "folderOpen"
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": [
        {
          "fileLocation": ["relative", "${workspaceFolder}"],
          "severity": "error",
          "pattern": {
            //This pattern catches error reported when tests didn't run
            //e.g. there was a build error. Catches a line like this:
            //
            //flowmazonapi.UnitTests failed with 1 error(s) and 1 warning(s) (0.6s)
            "regexp": "^(.*)\\s(failed with \\d* error\\(s\\) and \\d* warning\\(s\\).*)$",
            "file": 1,
            "message": 2
          },
          "background": {
            "activeOnStart": false,
            "beginsPattern": "^Restore complete \\(.*\\).*$",
            //If build failed (i.e. tests didn't run) then this pattern
            //matches the end of output which looks like this:
            //
            //Build failed with 1 error(s) and 1 warning(s) in 2.6s
            "endsPattern": "^(\\s*)(Build failed with \\d* error\\(s\\) and \\d* warning\\(s\\).*)$"
          }
        },
        {
          "fileLocation": ["relative", "${workspaceFolder}"],
          "severity": "error",
          "pattern": {
            //This pattern works to catch an error in dotnet tests
            //output whether it is because of an assert  failure in the test
            //or an exception throw in code-under-test.
            "regexp": "^(.*)\\(\\d*\\):\\s(error TESTERROR):.*$",
            "file": 1,
            "message": 2
          },
          "background": {
            "activeOnStart": false,
            "beginsPattern": "^Restore complete \\(.*\\).*$",
            //IF the tests ran, with or without error but every
            //got built successfully then the pattern will match
            //test run summary that looks like this:
            //Test summary: total: 21, failed: 0, succeeded: 21, skipped: 0, duration: 2.2s
            "endsPattern": "^Test summary: total:.*$"
          }
        }
      ]
    },
    {
      "label": "Dotnet Integration Test Watch",
      "type": "shell",
      // "args": [
      //   "-c",
      //   "echo ${workspaceFolder}\\flowmazonbackend\\flowmazonapi.IntegrationTests\\flowmazonapi.IntegrationTests.csproj"
      // ],
      // "command": "cmd",
      "command": "dotnet",
      "args": [
        "watch",
        "--project",
        "${workspaceFolder}\\flowmazonbackend\\flowmazonapi.IntegrationTests\\flowmazonapi.IntegrationTests.csproj",
        "test"
      ],
      "isBackground": true,
      "runOptions": {
        "runOn": "folderOpen"
      },
      "presentation": {
        "panel": "dedicated"
      }
      // "problemMatcher": {
      //   "fileLocation": ["relative", "${workspaceFolder}"],
      //   "severity": "error",
      //   "pattern": {
      //     // Matches a typical .NET test failure output line
      //     "regexp": "^\\s*(.*\\.cs)\\((\\d+),(\\d+)\\):\\s*error\\s*(.*)$",
      //     "file": 1,
      //     "line": 2,
      //     "column": 3,
      //     "message": 4
      //   },
      //   "background": {
      //     "activeOnStart": false,
      //     // Begins when dotnet test/watch outputs "Starting test execution..."
      //     "beginsPattern": "^Starting test execution.*",
      //     // Ends when dotnet test/watch outputs "Test Run Successful." or "Test Run Failed."
      //     "endsPattern": "^Test Run (Successful|Failed)\\."
      //   }
      // }
    },
    {
      "label": "Storybook watch",
      "type": "shell", //"process" does not work as value
      "command": "npm run test-storybook:watch",
      "options": {
        "cwd": "${workspaceFolder}/flowmazonfrontend"
      },
      "args": [],
      "isBackground": true, //this makes it keep running in the background without interrupting what you're doing
      "runOptions": {
        "runOn": "folderOpen" //start this task when folder is opened in VS Code
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error", //probabaly redundant as it is the default
        "pattern": {
          "kind": "file",
          "regexp": "(^\\[TEST\\]\\s*FAIL\\s*(browser:\\s*\\S*)\\s*(.*)\\s\\(.*\\)\\s*$)|(If you are in development, this likely indicates a problem with your Storybook process,)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)",
          "message": 1,
          "file": 2
        },
        "background": {
          "activeOnStart": false,
          //I have verified that if either of the following regexes is wrong,
          //you don't get the tick on the terminal to indicate once
          //a test run has completed (even though our watch task carries on running)
          "beginsPattern": "(^\\[TEST\\]\\s*Starting Storybook tests\\.\\.\\.\\s*$)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)",
          //"beginsPattern": "^\\s*Running \\d* tests using \\d* workers\\s*$",
          //USE THE FOLLOWING endsPattern IF REVERTING TO CHOKIDAR TO WATCH
          "endsPattern": "(^\\[TEST\\]\\s*Completed Storybook tests\\.\\.\\.\\s*$)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)"
          //"endsPattern": "^Waiting for file changes\\. Press enter to run tests, q to quit or h for more options\\.\\s*"
        }
      }
    },
    {
      "label": "Playwright watch",
      "type": "shell", //"process" does not work as value
      "command": "npm run test-playwright:watch",
      "options": {
        "cwd": "${workspaceFolder}/flowmazonfrontend"
      },
      "args": [],
      "isBackground": true, //this makes it keep running in the background without interrupting what you're doing
      "runOptions": {
        "runOn": "folderOpen" //start this task when folder is opened in VS Code
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error", //probabaly redundant as it is the default
        "pattern": {
          "regexp": "^\\[TEST\\]\\s*\\[(.*)\\]\\s\\S\\s(.*):(\\d+):(\\d+).*$",
          "file": 2,
          "line": 3,
          "column": 4,
          "message": 1
          //"regexp": "^\\s*\\d*\\sfailed\\s*$"
        },
        "background": {
          "activeOnStart": false,
          //I have verified that if either of the following regexes is wrong,
          //you don't get the tick on the terminal to indicate once
          //a test run has completed (even though our watch task carries on running)
          "beginsPattern": "^\\[TEST\\]\\s*Running \\d* tests using \\d* workers\\s*$",
          //"beginsPattern": "^\\s*Running \\d* tests using \\d* workers\\s*$",
          //USE THE FOLLOWING endsPattern IF REVERTING TO CHOKIDAR TO WATCH
          "endsPattern": "^\\[TEST\\]\\s*To open last HTML report run:\\s*$"
          //"endsPattern": "^Waiting for file changes\\. Press enter to run tests, q to quit or h for more options\\.\\s*"
        }
      }
    }
  ]
}
