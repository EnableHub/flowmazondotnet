{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "build-backend",
      "command": "dotnet",
      "type": "process",
      "args": [
        "build",
        "${workspaceFolder}/flowmazonbackend/flowmazonbackend.sln",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary;ForceNoAlign"
      ],
      "problemMatcher": "$msCompile"
    },
    {
      "label": "publish-backend",
      "command": "dotnet",
      "type": "process",
      "args": [
        "publish",
        "${workspaceFolder}/flowmazonbackend/flowmazonbackend.sln",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary;ForceNoAlign"
      ],
      "problemMatcher": "$msCompile"
    },
    {
      "label": "watch-backend",
      "command": "dotnet",
      "type": "process",
      "args": [
        "watch",
        "run",
        "--project",
        "${workspaceFolder}/flowmazonbackend/flowmazonbackend.sln"
      ],
      "problemMatcher": "$msCompile"
    },
    {
      "type": "docker-build",
      "label": "docker-build-backend: debug",
      "dependsOn": ["build"],
      "dockerBuild": {
        "tag": "flowmazonbackend:dev",
        "target": "base",
        "dockerfile": "${workspaceFolder}/flowmazonbackend/Dockerfile",
        "context": "${workspaceFolder}",
        "pull": true
      },
      "netCore": {
        "appProject": "${workspaceFolder}/flowmazonbackend/flowmazonapi/flowmazonapi.csproj"
      }
    },
    {
      "type": "docker-build",
      "label": "docker-build-backend: release",
      "dependsOn": ["build"],
      "dockerBuild": {
        "tag": "flowmazonbackend:latest",
        "dockerfile": "${workspaceFolder}/flowmazonbackend/Dockerfile",
        "context": "${workspaceFolder}",
        "platform": {
          "os": "linux",
          "architecture": "amd64"
        },
        "pull": true
      },
      "netCore": {
        "appProject": "${workspaceFolder}/flowmazonbackend/flowmazonapi/flowmazonapi.csproj"
      }
    },
    {
      "type": "docker-run",
      "label": "docker-run-backend: debug",
      "dependsOn": ["docker-build-backend: debug"],
      "dockerRun": {},
      "netCore": {
        "appProject": "${workspaceFolder}/flowmazonbackend/flowmazonapi/flowmazonapi.csproj",
        "enableDebugging": true
      }
    },
    {
      "type": "docker-run",
      "label": "docker-run-backend: release",
      "dependsOn": ["docker-build-backend: release"],
      "dockerRun": {},
      "netCore": {
        "appProject": "${workspaceFolder}/flowmazonbackend/flowmazonapi/flowmazonapi.csproj"
      }
    },
    {
      "label": "Storybook",
      "type": "shell", //"process" does not work as value
      "command": "npm run test-storybook:watch",
      "options": {
        "cwd": "${workspaceFolder}/flowmazonfrontend"
      },
      "args": [],
      "isBackground": true, //this makes it keep running in the background without interrupting what you're doing
      "runOptions": {
        "runOn": "folderOpen" //start this task when folder is opened in VS Code
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error", //probabaly redundant as it is the default
        "pattern": {
          "kind": "file",
          "regexp": "(^\\[TEST\\]\\s*FAIL\\s*(browser:\\s*\\S*)\\s*(.*)\\s\\(.*\\)\\s*$)|(If you are in development, this likely indicates a problem with your Storybook process,)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)",
          "message": 1,
          "file": 2
        },
        "background": {
          "activeOnStart": false,
          //I have verified that if either of the following regexes is wrong,
          //you don't get the tick on the terminal to indicate once
          //a test run has completed (even though our watch task carries on running)
          "beginsPattern": "(^\\[TEST\\]\\s*Starting Storybook tests\\.\\.\\.\\s*$)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)",
          //"beginsPattern": "^\\s*Running \\d* tests using \\d* workers\\s*$",
          //USE THE FOLLOWING endsPattern IF REVERTING TO CHOKIDAR TO WATCH
          "endsPattern": "(^\\[TEST\\]\\s*Completed Storybook tests\\.\\.\\.\\s*$)|(^\\[STORYBOOK\\] WARN Broken build, fix the error above\\.)"
          //"endsPattern": "^Waiting for file changes\\. Press enter to run tests, q to quit or h for more options\\.\\s*"
        }
      }
    },
    {
      "label": "Storybook A11Y",
      "type": "shell", //"process" does not work as value
      "command": "npm run test-storybook-a11y:watch",
      "options": {
        "cwd": "${workspaceFolder}/flowmazonfrontend"
      },
      "args": [],
      "isBackground": true, //this makes it keep running in the background without interrupting what you're doing
      "runOptions": {
        "runOn": "folderOpen" //start this task when folder is opened in VS Code
      },
      "presentation": {
        "panel": "dedicated"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "severity": "error", //probabaly redundant as it is the default
        "pattern": {
          "kind": "file",
          "regexp": "^\\s*Detected the following (accessibility violations).\\s*$",
          "message": 1,
          "file": 1
        },
        "background": {
          "activeOnStart": false,
          //I have verified that if either of the following regexes is wrong,
          //you don't get the tick on the terminal to indicate once
          //a test run has completed (even though our watch task carries on running)
          "beginsPattern": "^\\s*Starting Storybook A11Y tests\\.\\.\\.\\s*$",
          //"beginsPattern": "^\\s*Running \\d* tests using \\d* workers\\s*$",
          //USE THE FOLLOWING endsPattern IF REVERTING TO CHOKIDAR TO WATCH
          "endsPattern": "^\\s*Completed Storybook A11Y tests\\.\\.\\.\\s*$"
          //"endsPattern": "^Waiting for file changes\\. Press enter to run tests, q to quit or h for more options\\.\\s*"
        }
      }
    }
  ]
}
