name: Release to Production
concurrency: release-to-prod-pipeline
on:
  push:
    branches:
      - main

jobs:
  create-release:
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    runs-on: ubuntu-24.04
    name: Create Release
    outputs:
      released: ${{ env.RELEASED }}
      newVersion: ${{ env.NEW_VERSION }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout code
        id: checkout
        with:
          # This is needed for semantic-release to work,
          # giving it access to the full git history so it
          # can compute the next version and generate release notes.
          fetch-depth: 0

      - name: Install Package Dependencies
        # needed for both commitlint and semantic-release to work
        run: npm ci

      - name: Lint commits on main since last version tag
        run: |

          # Find latest version tag 
          # Starts with 'v' followed by a digit
          lasttag=$(git describe --tags --abbrev=0 --match="v[0-9]*" 2>/dev/null) \
            || echo "no version tag found, will only lint commit message of last commit"

          # Compute arguments to commitlint
          if [ "$lasttag" == "" ]; then

          # A version tag was not found (i.e. semantic-release has yet
          # to run successfully for the first time on current branch).
          # So only parse the last/latest commit.
            clargs="--last"

          else

          # latest version tag (that was found) should be mapped to
          # SHA of the commit bearing the tag. This should be --from
          # argument to commitlint (this is excluded when commitlint
          # run) and HEAD should be the --to argument (this would
          # be included when commitlint runs)
            echo "latest version tag is $lasttag, will lint messages of all commits forward of this up to HEAD..."
            clargs="--from=$(git rev-parse $lasttag) --to=HEAD"
            
          fi

          # Run commitlint with computed arguments
          npx -- commitlint --verbose $clargs
      - name: Create GitHub release
        id: semanticrelease
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "RELEASED=0" >> $GITHUB_ENV
          npm audit signatures
          npm run release

      # Instead of a separate job, you can have steps to
      # deploy in the same job.
      # However, each would need to be made conditional on
      # env.RELEASED variable (set during npm run release)
      # being 1. For example:
      #
      # - name: Deploy Step 1
      #   id: deploystep1
      #   if: ${{ env.RELEASED == 1 }}

  # OTHER JOBS HERE...
  build-container-and-push-to-acr:
    environment:
      name: Production
    needs: create-release
    if: ${{ needs.create-release.outputs.released == 1}}
    name: Build Container and Push to ACR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          # The referenced secret AZURE_CREDENTIALS contains
          # JSON with client id, client secret, tenant id and
          # subscription id of the service principal which
          # has AcrPush permission on the subscrpition or at least
          # on the ACR instance to which it will push in this job
          # within the subscription whose subscription id is provided.
          #
          # Format of the JSON is:
          # {
          #     "clientId": "<visible on service principal when you create it in portal>",
          #     "clientSecret": "<in portal you have to create it after creating the service principal>",
          #     "subscriptionId": "<subscription id of the subscription on which you have given AcrPush permission to the service principal>",
          #     "tenantId": "<visible on service principal when you create it in portal>"
          # }
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: |
          az acr login --name ${{ vars.ACR_NAME }}

      - name: Build Docker image
        run: |
          cd ./flowmazonbackend |
          docker build -t ${{ vars.ACR_NAME }}.azurecr.io/${{ vars.IMAGE_REPOSITORY }}:${{ needs.create-release.outputs.newVersion }} .

      # - name: Push Docker image
      #   run: |
      #     docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ steps.extract-version.outputs.version }}

      #     # Optionally tag as 'latest' as well
      #     docker tag ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ steps.extract-version.outputs.version }} \
      #                ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest
      #     docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest

  # deploy:
  #   name: Deploy to Vercel
  #   runs-on: ubuntu-24.04
  #   environment:
  #     name: Production
  #     url: ${{ steps.deploy-artifacts.outputs.previewUrl }}
  #   env:
  #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  #   needs: create-release
  #   if: ${{ needs.create-release.outputs.released == 1}}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Print version to console
  #       run: |
  #         echo "New Version Number is: ${{ needs.create-release.outputs.newVersion }}"
  #     - name: Update Version Number in package.json
  #       working-directory: ./flowmazonfrontend
  #       run: npm --no-git-tag-version version ${{ needs.create-release.outputs.newVersion }}
  #     - name: Install Vercel CLI
  #       working-directory: ./flowmazonfrontend
  #       run: npm install --global vercel@latest
  #     - name: Pull Vercel Environment Information
  #       working-directory: ./flowmazonfrontend
  #       run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Build Project Artifacts
  #       working-directory: ./flowmazonfrontend
  #       run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Deploy Project Artifacts to Vercel
  #       working-directory: ./flowmazonfrontend
  #       id: deploy-artifacts
  #       run: |
  #         previewUrl=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
  #         echo "previewUrl=$previewUrl" >> "$GITHUB_OUTPUT"
