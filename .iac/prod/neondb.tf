# --- Neon Infrastructure Setup ---

resource "neon_project" "flowmazon_project" {
  name                      = var.neon_project_name
  org_id                    = var.neon_org_id
  history_retention_seconds = 86400
  branch {
    name = var.neon_branch_name
  }
  

}


resource "neon_role" "owner_role" {
  project_id = neon_project.flowmazon_project.id
  branch_id  = neon_project.flowmazon_project.default_branch_id
  name       = var.neon_owner_role
  # Password will be auto-generated by Neon and available in neon_role.owner_role.password
}

resource "neon_role" "app_role" {
  project_id = neon_project.flowmazon_project.id
  branch_id  = neon_project.flowmazon_project.default_branch_id
  name       = var.neon_app_role
  # Password will be auto-generated by Neon and available in neon_role.app_role.password
}

resource "neon_database" "flowmazon_db" {
  project_id = neon_project.flowmazon_project.id
  branch_id  = neon_project.flowmazon_project.default_branch_id
  name       = var.neon_database_name
  owner_name = neon_role.owner_role.name # Assign ownership to the neon_owner_role
  depends_on = [neon_role.owner_role]    # Ensure owner role is created before db
}

# --- PostgreSQL Permissions Setup ---

provider "postgresql" {
  alias           = "db_owner_connection" # Alias for clarity if multiple pg provider configs exist
  host            = neon_project.flowmazon_project.database_host
  port            = 5432
  database        = neon_database.flowmazon_db.name
  username        = neon_role.owner_role.name     # Authenticate as the owner role
  password        = neon_role.owner_role.password # Use the owner role's auto-generated password
  sslmode         = "require"                     # Neon requires SSL
  connect_timeout = 15
  # superuser = false # neon_owner_role is not a superuser by default
}

# Grant CONNECT to the database for the app role
resource "postgresql_grant" "app_connect" {
  provider    = postgresql.db_owner_connection
  database    = neon_database.flowmazon_db.name
  role        = var.neon_app_role # Grant to the application role
  object_type = "database"
  privileges  = ["CONNECT"]
  depends_on = [
    neon_database.flowmazon_db, # Ensure DB exists
    neon_role.app_role,         # Ensure app role exists
  ]
}

# Grant USAGE on the public schema for the app role
resource "postgresql_grant" "app_schema_usage" {
  provider    = postgresql.db_owner_connection
  database    = neon_database.flowmazon_db.name
  role        = var.neon_app_role
  schema      = "public"
  object_type = "schema"    
  privileges  = ["USAGE"]
  depends_on  = [postgresql_grant.app_connect]
}

# Grant DML on existing tables in public schema for the app role
resource "postgresql_grant" "app_tables_dml_existing" {
  provider    = postgresql.db_owner_connection
  database    = neon_database.flowmazon_db.name
  role        = var.neon_app_role
  schema      = "public"
  object_type = "table" # Applies to all tables in the schema
  privileges  = ["SELECT", "INSERT", "UPDATE", "DELETE"]
  depends_on  = [postgresql_grant.app_connect]
}

# Grant DML on future tables created by the owner role in public schema for the app role
resource "postgresql_default_privileges" "app_tables_dml_future" {
  provider    = postgresql.db_owner_connection
  database    = neon_database.flowmazon_db.name
  role        = neon_role.app_role.name
  owner       = neon_role.owner_role.name
  schema      = "public"
  object_type = "table"
  privileges  = ["SELECT", "INSERT", "UPDATE", "DELETE"]
  depends_on  = [postgresql_grant.app_tables_dml_existing]

}

# Grant USAGE, SELECT on existing sequences in public schema for the app role
resource "postgresql_grant" "app_sequences_usage_select_existing" {
  provider    = postgresql.db_owner_connection
  database    = neon_database.flowmazon_db.name
  role        = var.neon_app_role
  schema      = "public"
  object_type = "sequence" # Applies to all sequences in the schema
  privileges  = ["USAGE", "SELECT"]
  depends_on  = [postgresql_grant.app_schema_usage]
}

# Grant USAGE, SELECT on future sequences created by the owner role in public schema for the app role
resource "postgresql_default_privileges" "app_sequences_usage_select_future" {
  provider    = postgresql.db_owner_connection
  database    = neon_database.flowmazon_db.name
  role        = neon_role.app_role.name
  owner       = neon_role.owner_role.name
  schema      = "public"
  object_type = "sequence"
  privileges  = ["USAGE", "SELECT"]
  depends_on  = [postgresql_grant.app_sequences_usage_select_existing]

}

# --- Outputs ---
#
# REMOVE THESE AS THEY SHOULD BE STORED IN KEY VAULT
#
output "neon_endpoint_host" {
  description = "The hostname of the Neon database endpoint."
  value       = neon_project.flowmazon_project.database_host
  sensitive   = true # Hostname can be considered sensitive
}

output "neon_owner_role_name_output" {
  description = "The name of the Neon database owner role."
  value       = neon_role.owner_role.name
  sensitive   = true
}

output "neon_owner_role_password" {
  description = "The auto-generated password for the Neon database owner role."
  value       = neon_role.owner_role.password
  sensitive   = true
}

output "neon_app_role_name_output" {
  description = "The name of the Neon application role."
  value       = neon_role.app_role.name
  sensitive   = true
}

output "neon_app_role_password" {
  description = "The auto-generated password for the Neon application role."
  value       = neon_role.app_role.password
  sensitive   = true
}

output "neon_connection_string_for_app_role" {
  description = "Full PostgreSQL connection string for the application role."
  value       = "postgresql://${neon_role.app_role.name}:${neon_role.app_role.password}@${neon_project.flowmazon_project.database_host}/${neon_database.flowmazon_db.name}?sslmode=require"
  sensitive   = true
}

output "another_connection_string" {
  description = "whatever"
  value       = neon_project.flowmazon_project.connection_uri
  sensitive   = true
}
