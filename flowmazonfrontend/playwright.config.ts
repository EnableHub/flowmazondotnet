import { defineConfig, devices } from '@playwright/test';

/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */
import dotenv from 'dotenv';
import path from 'path';

//loading docker dompose's .env file as it provides
//config setting to the frontend app
//we need those same settings while running tests also
dotenv.config({ path: path.resolve(__dirname, '..\\', '.env') });

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  testDir: './e2etests',
  /* Run tests in files in parallel */
  fullyParallel: true,
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI only.
   1 retry is enough, tsts shouldn't be THAT flaky! */
  retries: process.env.CI ? 1 : 0,
  /*In CI, if there are 10 failures then the whole test suite
  run should be aborted */
  maxFailures: process.env.CI ? 10 : undefined,
  /* Opt out of parallel tests on CI. */
  workers: process.env.CI ? 1 : undefined,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: [['html', { open: 'never' }]],
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: process.env.LCT
      ? 'http://127.0.0.1:4000' //URL exposed by locally running container
      : 'http://127.0.0.1:3000', //Next.js app URL

    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'retry-with-trace',
    screenshot: 'only-on-failure',
    video: 'retry-with-video',
  },

  /* Configure projects for major browsers */
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },

    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },

    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },

    /* Test against mobile viewports. */
    // {
    //   name: 'Mobile Chrome',
    //   use: { ...devices['Pixel 5'] },
    // },
    // {
    //   name: 'Mobile Safari',
    //   use: { ...devices['iPhone 12'] },
    // },

    /* Test against branded browsers. */
    // {
    //   name: 'Microsoft Edge',
    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },
    // },
    // {
    //   name: 'Google Chrome',
    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
    // },
  ],

  //`docker compose up --watch`
  //would rebuild a restart a single container whose
  //watched source directory has changed, and not the
  //containers that depend on it.
  //
  //Therefore, when restarting a test run because source
  //files changed, I need to wait for both the frontend's
  //and the backend's URLs to be available because either
  //of those could be being rebuilt in parallel by
  //docker compose up --watch
  //
  //Therefore I cannot use `url` option in `webServer`
  //as it cannot be given an array of url's to wait for
  //and will need to use wait-on NPM package in a
  //script ni pacakge.json. This means I will also
  //need to monitor the files myself using
  //onchange which is just as well because I cannot
  //use Playwright's watch mode as it only watches
  //for changes to test file and not other (source) files
  //in the app folder.
  //
  //If I am going to do onchange and wait-on myself
  //then I need to launch `docker compose up --watch`
  //concurrently self also so I the URL's I would wait on
  //would become available so I can move on to relanuch
  //the Playwright test suite.
  //
  //THEREFORE, webServer has no use for me for local
  //continuous testing. Hence I also see not use
  //for it for other purposes (e.g. in CI pipeline runs)
  //
  //

  webServer: !process.env.LCT
    ? //we are testing in VS Code or in CI
      {
        command:
          'concurrently "npm run dev" "dotnet run --project ../flowmazonbackend/flowmazonapi/flowmazonapi.csproj" --kill-others --raw && npx wait-on http://localhost:3000 http://localhost:5000',
        url: 'http://127.0.0.1:3000',
        //reusing existing server in CI is a moot point
        //but the value given is the default in
        //autogenerated playwright config file.
        reuseExistingServer: !process.env.CI,
      }
    : undefined, //no need to run web server in Local
  //Continuous Testing mode when it would have been started
  //in watch mod already by `docker compose up --watch`,
});
